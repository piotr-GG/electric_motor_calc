# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import time

from PyQt5 import QtCore, QtWidgets
from PyQt5.QtWidgets import QMessageBox

from gui.auxiliary.progress_bar import ProgressBar
from gui.help_gui import HelpDialog
from gui.results_tab import CalcResultsWidget
from model.motor_calc import MotorCalc
from model.motor import Motor
from model.motor_results import MotorResults
from gui.auxiliary.calculation_matplotlib import CalculateMatplotlib
from utils.utils import Utils
from xlsx.excel_parser import ExcelParser
from data_transfer.db_data_transfer import DBDataTransfer


class MainGUI(object):
    spin_box_min_wdth = 50;

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(600, 400)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(550, 400))
        MainWindow.setMaximumSize(QtCore.QSize(550, 400))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(240, 20, 81, 117))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setSizeConstraint(QtWidgets.QLayout.SetFixedSize)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(7)
        self.verticalLayout.setObjectName("verticalLayout")

        self.ks_hlayout = QtWidgets.QHBoxLayout()
        self.ks_hlayout.setObjectName("horizontalLayout")
        self.ks_label = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.ks_label.setObjectName("ks_label")
        self.ks_hlayout.addWidget(self.ks_label)

        self.ks_spinbox = QtWidgets.QSpinBox(self.verticalLayoutWidget)
        self.ks_spinbox.setObjectName("ks_spinbox")
        self.ks_spinbox.setMinimumWidth(type(self).spin_box_min_wdth)
        self.ks_hlayout.addWidget(self.ks_spinbox)

        self.verticalLayout.addLayout(self.ks_hlayout)
        self.kr_hlayout = QtWidgets.QHBoxLayout()
        self.kr_hlayout.setObjectName("kr_hlayout")
        self.kr_label = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.kr_label.setObjectName("kr_label")
        self.kr_hlayout.addWidget(self.kr_label)

        self.kr_spinbox = QtWidgets.QSpinBox(self.verticalLayoutWidget)
        self.kr_spinbox.setObjectName("kr_spinbox")
        self.kr_spinbox.setMinimumWidth(type(self).spin_box_min_wdth)
        self.kr_hlayout.addWidget(self.kr_spinbox)

        self.verticalLayout.addLayout(self.kr_hlayout)

        self.gs_hlayout = QtWidgets.QHBoxLayout()
        self.gs_hlayout.setObjectName("gs_hlayout")
        self.gs_label = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.gs_label.setObjectName("label_3")
        self.gs_hlayout.addWidget(self.gs_label)

        self.gs_spinbox = QtWidgets.QSpinBox(self.verticalLayoutWidget)
        self.gs_spinbox.setObjectName("gs_spinbox")
        self.gs_spinbox.setMinimumWidth(type(self).spin_box_min_wdth)
        self.gs_hlayout.addWidget(self.gs_spinbox)

        self.verticalLayout.addLayout(self.gs_hlayout)
        self.gr_hlayout = QtWidgets.QHBoxLayout()
        self.gr_hlayout.setObjectName("horizontalLayout_4")

        self.gr_label = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.gr_label.setObjectName("gr_label")
        self.gr_hlayout.addWidget(self.gr_label)
        self.gr_spinbox = QtWidgets.QSpinBox(self.verticalLayoutWidget)
        self.gr_spinbox.setObjectName("gr_spinbox")
        self.gr_spinbox.setMinimumWidth(type(self).spin_box_min_wdth)
        self.gr_hlayout.addWidget(self.gr_spinbox)

        self.verticalLayout.addLayout(self.gr_hlayout)
        self.calculate_pbtn = QtWidgets.QPushButton(self.centralwidget)
        self.calculate_pbtn.setGeometry(QtCore.QRect(200, 151, 161, 41))
        self.calculate_pbtn.setObjectName("calculate_pbtn")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(100, 200, 401, 161))
        self.groupBox.setObjectName("groupBox")
        self.limit_lower_spinbox = QtWidgets.QSpinBox(self.groupBox)
        self.limit_lower_spinbox.setGeometry(QtCore.QRect(100, 60, 61, 20))
        self.limit_lower_spinbox.setObjectName("limit_lower_spinbox")
        self.limit_upper_spinbox = QtWidgets.QSpinBox(self.groupBox)
        self.limit_upper_spinbox.setGeometry(QtCore.QRect(220, 60, 61, 21))
        self.limit_upper_spinbox.setObjectName("limit_upper_spinbox")
        self.limit_label = QtWidgets.QLabel(self.groupBox)
        self.limit_label.setGeometry(QtCore.QRect(120, 20, 120, 21))
        self.limit_label.setAlignment(QtCore.Qt.AlignCenter)
        self.limit_label.setObjectName("limit_label")
        self.limit_min_label = QtWidgets.QLabel(self.groupBox)
        self.limit_min_label.setGeometry(QtCore.QRect(40, 60, 61, 21))
        self.limit_min_label.setAlignment(QtCore.Qt.AlignCenter)
        self.limit_min_label.setObjectName("limit_min")
        self.limit_max_label = QtWidgets.QLabel(self.groupBox)
        self.limit_max_label.setGeometry(QtCore.QRect(160, 60, 61, 21))
        self.limit_max_label.setAlignment(QtCore.Qt.AlignCenter)
        self.limit_max_label.setObjectName("label_7")
        self.matplotlib_btn = QtWidgets.QPushButton(self.groupBox)
        self.matplotlib_btn.setGeometry(QtCore.QRect(120, 100, 121, 41))
        self.matplotlib_btn.setObjectName("matplotlib_btn")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 600, 21))
        self.menubar.setObjectName("menubar")
        self.menuZamknij = QtWidgets.QMenu(self.menubar)
        self.menuZamknij.setObjectName("menuZamknij")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionHelp = QtWidgets.QAction(MainWindow)
        self.actionHelp.setObjectName("actionHelp")
        self.menuZamknij.addAction(self.actionHelp)
        self.menubar.addAction(self.menuZamknij.menuAction())
        self.limit_lower_spinbox.setValue(1)
        self.limit_upper_spinbox.setValue(20)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        # Setup custom variables and attributes
        self.customSetup()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Obliczanie strat dodatkowych silnika"))
        self.centralwidget.setWhatsThis(
            _translate("MainWindow", ""))
        self.ks_label.setText(_translate("MainWindow", "ks"))
        self.kr_label.setText(_translate("MainWindow", "kr"))
        self.gs_label.setText(_translate("MainWindow", "gs"))
        self.gr_label.setText(_translate("MainWindow", "gr"))
        self.calculate_pbtn.setText(_translate("MainWindow", "Wykonaj obliczenia"))
        self.groupBox.setTitle(_translate("MainWindow", "Badanie wpływu zakresu harmonicznych na straty"))
        self.limit_label.setText(_translate("MainWindow", "Zakres harmonicznych"))
        self.limit_min_label.setText(_translate("MainWindow", "min"))
        self.limit_max_label.setText(_translate("MainWindow", "max"))
        self.matplotlib_btn.setText(_translate("MainWindow", "Zbadaj wpływ"))
        self.menuZamknij.setTitle(_translate("MainWindow", "Opcje"))
        self.actionHelp.setText(_translate("MainWindow", "Pomoc"))

    def customSetup(self):
        self.ks_spinbox.setValue(5)
        self.kr_spinbox.setValue(5)
        self.gs_spinbox.setValue(5)
        self.gr_spinbox.setValue(5)

        self.limit_upper_spinbox.setMaximum(999)
        self.limit_upper_spinbox.setMinimum(1)

        self.limit_lower_spinbox.setMaximum(999)
        self.limit_lower_spinbox.setMinimum(1)
        self.calculate_pbtn.clicked.connect(self.runCalculations)

        self.matplotlib_btn.clicked.connect(self.runMatplotlib)
        self.calc_tab = None
        self.results_tab = None

        self.help_ui = None
        self.actionHelp.triggered.connect(self.show_help_dialog)
        DBDataTransfer.init_database()

    def show_help_dialog(self):
        self.help_ui = HelpDialog()
        self.help_ui.show()

    def show_work_in_progress(self):
        Utils.show_work_in_progress_msg_box()

    def runMatplotlib(self):
        limit_lower = self.limit_lower_spinbox.value()
        limit_upper = self.limit_upper_spinbox.value()
        if limit_upper > limit_lower:
            test_motor = Motor()

            self.prog_bar_widget = ProgressBar()

            self.matplotlib_obj = CalculateMatplotlib(limit_lower, limit_upper, test_motor)
            self.matplotlib_obj._signal.connect(self.prog_bar_widget.signal_accept)
            self.prog_bar_widget.show()
            self.matplotlib_obj.start()
        else:
            Utils.show_error_box(text="Wartość limit min nie może być większa lub równa wartości limit max",
                                 title="Błędne wartości")

    def runCalculations(self):
        input_vals = self.validateLimitVals()
        if len(input_vals) == 4:
            ks, kr, gs, gr = input_vals

            test_motor = Motor()
            motor_calc = MotorCalc(test_motor, limit=0, kls=ks, klr=kr, gs=gs, gr=gr)
            motor_calc.calculate()
            motor_results = MotorResults(motor_calc)

            self.results_tab = CalcResultsWidget(motor_results)
            self.results_tab.show()

            print(motor_results)
        else:
            print("Nie weszło!")

    def validateLimitVals(self) -> tuple:
        ks = self.ks_spinbox.value()
        kr = self.kr_spinbox.value()
        gs = self.gs_spinbox.value()
        gr = self.gr_spinbox.value()

        if ks <= 0:
            type(self).showErrorBox("Błędna wartość", "ks mniejsze bądź równe 0")
            return tuple()
        if kr <= 0:
            type(self).showErrorBox("Błędna wartość", "kr mniejsze bądź równe 0")
            return tuple()
        if gs <= 0:
            type(self).showErrorBox("Błędna wartość", "gs mniejsze bądź równe 0")
            return tuple()
        if gr <= 0:
            type(self).showErrorBox("Błędna wartość", "gr mniejsze bądź równe 0")
            return tuple()

        return ks, kr, gs, gr

    @staticmethod
    def showErrorBox(title: str, err_text: str):
        try:
            error_box = QMessageBox()
            error_box.setWindowTitle(title)
            error_box.setText(err_text)
            error_box.setIcon(QMessageBox.Warning)
            error_box.setStandardButtons(QMessageBox.Ok)
            x = error_box.exec_()
        except Exception as e:
            print(str(e))


if __name__ == "__main__":
    import sys

    sys.excepthook = Utils.excepthook_errormsg
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = MainGUI()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
