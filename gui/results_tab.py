# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'results_tab.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QInputDialog, QLineEdit, QMessageBox, QFileDialog

from db.queries import Queries
from gui.CalcTabModel import CalcTabModel
from gui.LossesTabModel import LossesTabModel
from gui.help_gui import HelpDialog
from model.motor_results import MotorResults
from utils.utils import Utils
from definitions import ROOT_DIR
from data_transfer.db_data_transfer import DBDataTransfer
from data_transfer.json_data_transfer import JSONDataTransfer
from data_transfer.numpy_data_transfer import NumpyDataTransfer


class CalcResultsWidget(object):
    def __init__(self, motor_results: MotorResults):
        self.motor_results = motor_results

        self.Form = QtWidgets.QWidget()
        self.Form.setWindowModality(2)
        self.setupUi(self.Form)
        self.initVars()
        self.connectCustomSignals()
        self.updateLosses()

    @property
    def motor_results(self):
        return self.__motor_results

    @motor_results.setter
    def motor_results(self, value):
        if isinstance(value, MotorResults):
            self.__motor_results = value
        else:
            raise ValueError("Argument given is not of MotorResult type")

    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(850, 600)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(Form.sizePolicy().hasHeightForWidth())
        Form.setSizePolicy(sizePolicy)
        Form.setMinimumSize(QtCore.QSize(850, 600))
        Form.setMaximumSize(QtCore.QSize(850, 600))
        Form.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.calc_tabview = QtWidgets.QTableView(Form)
        self.calc_tabview.setGeometry(QtCore.QRect(60, 260, 750, 150))
        self.calc_tabview.setObjectName("calc_tabview")
        self.groupBox = QtWidgets.QGroupBox(Form)
        self.groupBox.setGeometry(QtCore.QRect(380, 20, 161, 141))
        self.groupBox.setObjectName("groupBox")
        self.label_5 = QtWidgets.QLabel(self.groupBox)
        self.label_5.setGeometry(QtCore.QRect(20, 20, 47, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.layoutWidget = QtWidgets.QWidget(self.groupBox)
        self.layoutWidget.setGeometry(QtCore.QRect(20, 40, 107, 88))
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.stator_flux_d_rbtn = QtWidgets.QRadioButton(self.layoutWidget)
        self.stator_flux_d_rbtn.setObjectName("stator_flux_d_rbtn")
        self.verticalLayout_5.addWidget(self.stator_flux_d_rbtn)
        self.rotor_flux_d_rbtn = QtWidgets.QRadioButton(self.layoutWidget)
        self.rotor_flux_d_rbtn.setObjectName("rotor_flux_d_rbtn")
        self.verticalLayout_5.addWidget(self.rotor_flux_d_rbtn)
        self.stator_losses_rbtn = QtWidgets.QRadioButton(self.layoutWidget)
        self.stator_losses_rbtn.setObjectName("stator_losses_rbtn")
        self.verticalLayout_5.addWidget(self.stator_losses_rbtn)
        self.rotor_losses_rbtn = QtWidgets.QRadioButton(self.layoutWidget)
        self.rotor_losses_rbtn.setObjectName("rotor_losses_rbtn")
        self.verticalLayout_5.addWidget(self.rotor_losses_rbtn)
        self.groupBox_5 = QtWidgets.QGroupBox(Form)
        self.groupBox_5.setGeometry(QtCore.QRect(20, 20, 161, 221))
        self.groupBox_5.setObjectName("groupBox_5")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.groupBox_5)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(20, 20, 121, 181))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(5)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label_4 = QtWidgets.QLabel(self.verticalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_4.sizePolicy().hasHeightForWidth())
        self.label_4.setSizePolicy(sizePolicy)
        self.label_4.setMinimumSize(QtCore.QSize(26, 0))
        self.label_4.setObjectName("label_4")
        self.horizontalLayout_4.addWidget(self.label_4, 0, QtCore.Qt.AlignLeft)
        self.ps_val_qle = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        self.ps_val_qle.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ps_val_qle.sizePolicy().hasHeightForWidth())
        self.ps_val_qle.setSizePolicy(sizePolicy)
        self.ps_val_qle.setMaximumSize(QtCore.QSize(100, 16777215))
        self.ps_val_qle.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.ps_val_qle.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.ps_val_qle.setObjectName("ps_val_qle")
        self.horizontalLayout_4.addWidget(self.ps_val_qle, 0, QtCore.Qt.AlignHCenter)
        self.verticalLayout.addLayout(self.horizontalLayout_4)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label.setMinimumSize(QtCore.QSize(26, 0))
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.pal_val_qle = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pal_val_qle.sizePolicy().hasHeightForWidth())
        self.pal_val_qle.setSizePolicy(sizePolicy)
        self.pal_val_qle.setMaximumSize(QtCore.QSize(100, 16777215))
        self.pal_val_qle.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.pal_val_qle.setObjectName("pal_val_qle")
        self.horizontalLayout.addWidget(self.pal_val_qle)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_2 = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label_2.setMinimumSize(QtCore.QSize(26, 0))
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_2.addWidget(self.label_2)
        self.pss_val_qle = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        self.pss_val_qle.setMaximumSize(QtCore.QSize(100, 16777215))
        self.pss_val_qle.setObjectName("pss_val_qle")
        self.horizontalLayout_2.addWidget(self.pss_val_qle)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label_3 = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label_3.setMinimumSize(QtCore.QSize(26, 0))
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_3.addWidget(self.label_3)
        self.pp_val_qle = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        self.pp_val_qle.setMaximumSize(QtCore.QSize(100, 16777215))
        self.pp_val_qle.setObjectName("pp_val_qle")
        self.horizontalLayout_3.addWidget(self.pp_val_qle)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        self.layoutWidget1 = QtWidgets.QWidget(Form)
        self.layoutWidget1.setGeometry(QtCore.QRect(240, 440, 361, 101))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.layoutWidget1)
        self.horizontalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.groupBox_2 = QtWidgets.QGroupBox(self.layoutWidget1)
        self.groupBox_2.setObjectName("groupBox_2")
        self.layoutWidget2 = QtWidgets.QWidget(self.groupBox_2)
        self.layoutWidget2.setGeometry(QtCore.QRect(20, 20, 77, 60))
        self.layoutWidget2.setObjectName("layoutWidget2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.layoutWidget2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.save_to_file_pbtn = QtWidgets.QPushButton(self.layoutWidget2)
        self.save_to_file_pbtn.setObjectName("save_to_file_pbtn")
        self.verticalLayout_2.addWidget(self.save_to_file_pbtn)
        self.load_from_file_pbtn = QtWidgets.QPushButton(self.layoutWidget2)
        self.load_from_file_pbtn.setObjectName("load_from_file_pbtn")
        self.verticalLayout_2.addWidget(self.load_from_file_pbtn)
        self.horizontalLayout_5.addWidget(self.groupBox_2)
        self.groupBox_3 = QtWidgets.QGroupBox(self.layoutWidget1)
        self.groupBox_3.setObjectName("groupBox_3")
        self.layoutWidget3 = QtWidgets.QWidget(self.groupBox_3)
        self.layoutWidget3.setGeometry(QtCore.QRect(20, 20, 77, 54))
        self.layoutWidget3.setObjectName("layoutWidget3")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.layoutWidget3)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.save_to_json_pbtn = QtWidgets.QPushButton(self.layoutWidget3)
        self.save_to_json_pbtn.setObjectName("save_to_json_pbtn")
        self.verticalLayout_3.addWidget(self.save_to_json_pbtn)
        self.load_from_json_pbtn = QtWidgets.QPushButton(self.layoutWidget3)
        self.load_from_json_pbtn.setObjectName("load_from_json_pbtn")
        self.verticalLayout_3.addWidget(self.load_from_json_pbtn)
        self.horizontalLayout_5.addWidget(self.groupBox_3)
        self.groupBox_4 = QtWidgets.QGroupBox(self.layoutWidget1)
        self.groupBox_4.setObjectName("groupBox_4")
        self.layoutWidget4 = QtWidgets.QWidget(self.groupBox_4)
        self.layoutWidget4.setGeometry(QtCore.QRect(20, 20, 77, 54))
        self.layoutWidget4.setObjectName("layoutWidget4")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.layoutWidget4)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.save_to_DB_pbtn = QtWidgets.QPushButton(self.layoutWidget4)
        self.save_to_DB_pbtn.setObjectName("pushButton_6")
        self.verticalLayout_4.addWidget(self.save_to_DB_pbtn)
        self.load_from_DB_pbtn = QtWidgets.QPushButton(self.layoutWidget4)
        self.load_from_DB_pbtn.setObjectName("load_from_sql_pbtn")
        self.verticalLayout_4.addWidget(self.load_from_DB_pbtn)
        self.horizontalLayout_5.addWidget(self.groupBox_4)

        self.coeff_groupbox = QtWidgets.QGroupBox(Form)
        self.coeff_groupbox.setGeometry(QtCore.QRect(200, 20, 161, 181))
        self.coeff_groupbox.setObjectName("groupBox_6")
        self.coeff_vert_layout = QtWidgets.QVBoxLayout(self.coeff_groupbox)
        self.coeff_vert_layout.setObjectName("verticalLayout_6")

        # self.verticalLayoutWidget.setGeometry(QtCore.QRect(20, 20, 121, 181))

        self.ks_hor_layout = QtWidgets.QHBoxLayout()
        self.ks_hor_layout.setObjectName("horizontalLayout_6")
        self.ks_label = QtWidgets.QLabel(self.coeff_groupbox)
        self.ks_label.setMinimumSize(QtCore.QSize(30, 0))
        self.ks_label.setObjectName("label_6")
        self.ks_hor_layout.addWidget(self.ks_label)
        self.ks_qle = QtWidgets.QLineEdit(self.coeff_groupbox)
        self.ks_qle.setObjectName("ks_qle")
        self.ks_hor_layout.addWidget(self.ks_qle)

        self.kr_hor_layout = QtWidgets.QHBoxLayout()
        self.kr_hor_layout.setObjectName("horizontalLayout_7")
        self.kr_label = QtWidgets.QLabel(self.coeff_groupbox)
        self.kr_label.setMinimumSize(QtCore.QSize(30, 0))
        self.kr_label.setObjectName("label_7")
        self.kr_hor_layout.addWidget(self.kr_label)
        self.kr_qle = QtWidgets.QLineEdit(self.coeff_groupbox)
        self.kr_qle.setObjectName("kr_qle")
        self.kr_hor_layout.addWidget(self.kr_qle)

        self.gs_hor_layout = QtWidgets.QHBoxLayout()
        self.gs_hor_layout.setObjectName("gs_hor_layout")
        self.gs_label = QtWidgets.QLabel(self.coeff_groupbox)
        self.gs_label.setMinimumSize(QtCore.QSize(30, 0))
        self.gs_label.setObjectName("gs_label")
        self.gs_hor_layout.addWidget(self.gs_label)
        self.gs_qle = QtWidgets.QLineEdit(self.coeff_groupbox)
        self.gs_qle.setObjectName("gs_qle")
        self.gs_hor_layout.addWidget(self.gs_qle)

        self.gr_hor_layout = QtWidgets.QHBoxLayout()
        self.gr_hor_layout.setObjectName("gr_hor_layout")
        self.gr_label = QtWidgets.QLabel(self.coeff_groupbox)
        self.gr_label.setMinimumSize(QtCore.QSize(30, 0))
        self.gr_label.setObjectName("gr_label")
        self.gr_hor_layout.addWidget(self.gr_label)
        self.gr_qle = QtWidgets.QLineEdit(self.coeff_groupbox)
        self.gr_qle.setObjectName("gr_qle")
        self.gr_hor_layout.addWidget(self.gr_qle)

        self.coeff_vert_layout.addLayout(self.ks_hor_layout)
        self.coeff_vert_layout.addLayout(self.kr_hor_layout)
        self.coeff_vert_layout.addLayout(self.gs_hor_layout)
        self.coeff_vert_layout.addLayout(self.gr_hor_layout)

        self.help_clbtn = QtWidgets.QCommandLinkButton(Form)
        self.help_clbtn.setGeometry(QtCore.QRect(660, 20, 101, 41))
        self.help_clbtn.setObjectName("help_clbtn")

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)
        Form.setTabOrder(self.ps_val_qle, self.pal_val_qle)
        Form.setTabOrder(self.pal_val_qle, self.pss_val_qle)
        Form.setTabOrder(self.pss_val_qle, self.pp_val_qle)
        Form.setTabOrder(self.pp_val_qle, self.ks_qle)
        Form.setTabOrder(self.ks_qle, self.stator_flux_d_rbtn)
        Form.setTabOrder(self.stator_flux_d_rbtn, self.rotor_flux_d_rbtn)
        Form.setTabOrder(self.rotor_flux_d_rbtn, self.stator_losses_rbtn)
        Form.setTabOrder(self.stator_losses_rbtn, self.rotor_losses_rbtn)
        Form.setTabOrder(self.rotor_losses_rbtn, self.help_clbtn)
        Form.setTabOrder(self.help_clbtn, self.calc_tabview)
        Form.setTabOrder(self.calc_tabview, self.save_to_file_pbtn)
        Form.setTabOrder(self.save_to_file_pbtn, self.load_from_file_pbtn)
        Form.setTabOrder(self.load_from_file_pbtn, self.save_to_json_pbtn)
        Form.setTabOrder(self.save_to_json_pbtn, self.load_from_json_pbtn)
        Form.setTabOrder(self.load_from_json_pbtn, self.save_to_DB_pbtn)
        Form.setTabOrder(self.save_to_DB_pbtn, self.load_from_DB_pbtn)

        self.pss_val_qle.setReadOnly(True)
        self.pal_val_qle.setReadOnly(True)
        self.pp_val_qle.setReadOnly(True)
        self.ps_val_qle.setReadOnly(True)
        self.ks_qle.setReadOnly(True)
        self.kr_qle.setReadOnly(True)
        self.gs_qle.setReadOnly(True)
        self.gr_qle.setReadOnly(True)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Wyniki obliczeń"))
        self.groupBox.setTitle(_translate("Form", "Tabela"))
        self.label_5.setText(_translate("Form", "Pokaż:"))
        self.stator_flux_d_rbtn.setText(_translate("Form", "Indukcje stojana"))
        self.rotor_flux_d_rbtn.setText(_translate("Form", "Indukcje wirnika"))
        self.stator_losses_rbtn.setText(_translate("Form", "Straty w stojanie"))
        self.rotor_losses_rbtn.setText(_translate("Form", "Straty w wirniku"))
        self.groupBox_5.setTitle(_translate("Form", "Obliczone straty sumaryczne"))
        self.label_4.setText(_translate("Form", "Ps"))
        self.label.setText(_translate("Form", "PAl"))
        self.label_2.setText(_translate("Form", "Pss"))
        self.label_3.setText(_translate("Form", "Pp"))
        self.groupBox_2.setTitle(_translate("Form", "Dane z pliku .npz"))
        self.save_to_file_pbtn.setText(_translate("Form", "Zapisz"))
        self.load_from_file_pbtn.setText(_translate("Form", "Ładuj"))
        self.groupBox_3.setTitle(_translate("Form", "Dane z JSON"))
        self.save_to_json_pbtn.setText(_translate("Form", "Zapisz"))
        self.load_from_json_pbtn.setText(_translate("Form", "Ładuj"))
        self.groupBox_4.setTitle(_translate("Form", "Dane z SQL"))
        self.save_to_DB_pbtn.setText(_translate("Form", "Zapisz"))
        self.load_from_DB_pbtn.setText(_translate("Form", "Ładuj"))
        self.coeff_groupbox.setTitle(_translate("Form", "Zakres harmonicznych"))
        self.ks_label.setText(_translate("Form", "ks"))
        self.kr_label.setText(_translate("Form", "kr"))
        self.gs_label.setText(_translate("Form", "gs"))
        self.gr_label.setText(_translate("Form", "gr"))
        self.help_clbtn.setText(_translate("Form", "Pomoc"))

    def show(self):
        self.Form.show()

    def initVars(self):
        self.activeState = ""
        self.limit = self.motor_results.motor_calc.limit
        self.ks = self.motor_results.motor_calc.kls_
        self.kr = self.motor_results.motor_calc.klr_

        self.gs = self.motor_results.motor_calc.gs_
        self.gr = self.motor_results.motor_calc.gr_

        self.Ps = self.motor_results.motor_calc.Ps
        self.PAl = self.motor_results.motor_calc.PAl
        self.Pss = self.motor_results.motor_calc.Pss
        self.Pp = self.motor_results.motor_calc.Pp
        self.stator_losses = None
        self.stator_fluxes = None
        self.rotor_fluxes = None
        self.rotor_losses = None

    def connectCustomSignals(self):
        self.rbtns = [self.stator_flux_d_rbtn, self.rotor_flux_d_rbtn, self.stator_losses_rbtn, self.rotor_losses_rbtn]
        for obj in self.rbtns:
            obj.clicked.connect(self.rbtns_toggled)
        self.help_clbtn.clicked.connect(self.show_help_dialog)
        self.save_to_file_pbtn.clicked.connect(self.save_to_npz_file)
        self.load_from_file_pbtn.clicked.connect(self.load_from_npz_file)
        self.save_to_DB_pbtn.clicked.connect(self.save_to_DB)
        self.load_from_DB_pbtn.clicked.connect(self.load_from_DB)
        self.save_to_json_pbtn.clicked.connect(self.save_to_json)
        self.load_from_json_pbtn.clicked.connect(self.load_from_json)

    def updateLosses(self):
        self.pss_val_qle.setText(str(self.Pss))
        self.pal_val_qle.setText(str(self.PAl))
        self.pp_val_qle.setText(str(self.Pp))
        self.ps_val_qle.setText(str(self.Ps))
        self.ks_qle.setText(str(self.ks))
        self.kr_qle.setText(str(self.kr))
        self.gs_qle.setText(str(self.gs))
        self.gr_qle.setText(str(self.gr))
        self.activeState = ""
        self.stator_flux_d_rbtn.click()

    def rbtns_toggled(self):
        if self.stator_flux_d_rbtn.isChecked() and self.activeState != "STATOR":
            self.activeState = "STATOR"
            self.show_stator_flux_d()
        elif self.rotor_flux_d_rbtn.isChecked() and self.activeState != "ROTOR":
            self.activeState = "ROTOR"
            self.show_rotor_flux_d()
        elif self.stator_losses_rbtn.isChecked() and self.activeState != "STATOR_LOSSES":
            self.activeState = "STATOR_LOSSES"
            self.show_stator_losses()
        elif self.rotor_losses_rbtn.isChecked() and self.activeState != "ROTOR_LOSSES":
            self.activeState = "ROTOR_LOSSES"
            self.show_rotor_losses()

    def show_help_dialog(self):
        self.help_dialog = HelpDialog()
        self.help_dialog.show()

    def save_to_npz_file(self):
        filename, ok_pressed = QInputDialog.getText(self.Form, "Podaj nazwę pliku", "Proszę podać nazwę pliku:")
        if ok_pressed:
            if filename != "":
                saved = NumpyDataTransfer.export_data(self.motor_results.motor_calc, filename)
                if saved:
                    Utils.show_msg_box(title="Zapis danych", text="Pomyślnie zapisano dane.", parent=self.Form)
                else:
                    Utils.show_error_box(title="(Zapis danych",
                                         text="Wystąpił błąd podczas próby zapisanu do bazy danych!", parent=self.Form)

    def load_from_npz_file(self):
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        filename, _ = QFileDialog.getOpenFileName(self.Form, "Wybierz plik", ROOT_DIR + "/npz/")
        if filename:
            if not filename.endswith(".npz"):
                Utils.show_error_box(title="Błędny format pliku", text="Proszę wybrać format pliku .npz!",
                                     parent=self.Form)
                return
            else:
                self.limit, self.ks, self.kr, self.gs, self.gr, self.Ps, self.PAl, self.Pss, self.Pp, self.stator_losses, \
                self.rotor_losses, self.stator_fluxes, self.rotor_fluxes = NumpyDataTransfer.import_data(filename)
                Utils.show_msg_box(title="Zapis danych", text="Pomyślnie wczytano dane.", parent=self.Form)
                self.updateLosses()

    def save_to_DB(self):
        id_added = DBDataTransfer.export_data(self.motor_results.motor_calc)
        if id_added != -1:
            Utils.show_msg_box(title="Zapis danych", text=f"ID zapisanego rekordu = {id_added}")
        else:
            Utils.show_error_box(title="Zapis danych", text="Wystąpił błąd podczas próby zapisu do bazy danych!")

    def load_from_DB(self):
        availabe_ids = self.show_available_ids()
        id = Utils.get_int_input_box(self.Form)
        print("available_id typ = ", type(availabe_ids[0]))
        print("id typ = ", type(id))
        if id:
            if id not in availabe_ids:
                Utils.show_error_box(title="Błędna wartość", text="Proszę podać wartość z zakresu:" + str(availabe_ids))
                return
            self.limit, self.ks, self.kr, self.gs, self.gr, self.Ps, self.PAl, self.Pss, self.Pp, self.stator_losses, \
            self.rotor_losses, self.stator_fluxes, self.rotor_fluxes = DBDataTransfer.import_data(id)
            if self.limit is not None:
                Utils.show_msg_box(title="Odczyt", text="Pomyślnie odczytano dane z DB.")
                self.updateLosses()

    def show_available_ids(self):
        available_ids = list(x[0] for x in Queries.get_available_ids())
        Utils.show_msg_box(title="Dostępne id", text="Lista dostępnych id:" + str(available_ids))
        return available_ids

    # TODO: MOVE TO SEPARATE CLASS
    def save_to_json(self):
        filename, ok_pressed = QInputDialog.getText(self.Form, "Podaj nazwę pliku", "Podaj nazwę pliku: ",
                                                    QLineEdit.Normal, "")
        if ok_pressed:
            if filename != "":
                saved = JSONDataTransfer.export_data(self.motor_results.motor_calc, filename)
                if saved:
                    Utils.show_msg_box(title="Zapis", text="Pomyślnie zapisano wyniki")
                else:
                    Utils.show_msg_box(title="Zapis", text="Wystąpił błąd zapisu!", icon=QMessageBox.Warning)

    # TODO: MOVE TO SEPARATE CLASS
    def load_from_json(self):
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        filename, _ = QFileDialog.getOpenFileName(self.Form, "Wybierz plik", ROOT_DIR + "/json/")
        print(filename)
        if filename:
            print("Odczytujemy dane z JSONA")
            self.limit, self.ks, self.kr, self.gs, self.gr, self.Ps, self.PAl, self.Pss, self.Pp, self.stator_losses, \
            self.rotor_losses, self.stator_fluxes, self.rotor_fluxes = JSONDataTransfer.import_data(filename)
            if self.limit is not None:
                print("Powinno się pojawić okienko")
                Utils.show_msg_box(title="Odczyt", text="Pomyślnie odczytano dane z JSONa.")
                self.updateLosses()

    def show_stator_flux_d(self):
        if self.stator_fluxes is None:
            self.stator_fluxes = self.motor_results.motor_calc.stator_fluxes()
        self.header = ["vs", "Bvs"]
        self.model = CalcTabModel(self.stator_fluxes, None, self.header)
        self.calc_tabview.setModel(self.model)
        self.setCellSizes()

    def show_rotor_flux_d(self):
        if self.rotor_fluxes is None:
            self.rotor_fluxes = self.motor_results.motor_calc.rotor_fluxes()
        self.header = ["vr", "Bvr"]
        self.model = CalcTabModel(self.rotor_fluxes, None, self.header)
        self.calc_tabview.setModel(self.model)
        self.setCellSizes()

    def show_stator_losses(self):
        if self.stator_losses is None:
            self.stator_losses = self.motor_results.motor_calc.stator_losses()
        self.header = ["vs", "Psv", "PAlv"]
        self.model = LossesTabModel(self.stator_losses, self.header)
        self.calc_tabview.setModel(self.model)
        self.setCellSizes()

    def show_rotor_losses(self):
        if self.rotor_losses is None:
            self.rotor_losses = self.motor_results.motor_calc.rotor_losses()
        self.header = ["vr", "Pssv", "Ppv"]
        self.model = LossesTabModel(self.rotor_losses, self.header)
        self.calc_tabview.setModel(self.model)
        self.setCellSizes()

    def setCellSizes(self):
        vheader = self.calc_tabview.verticalHeader()
        vheader.setSectionResizeMode(0, QtWidgets.QHeaderView.Fixed)
        vheader.setSectionResizeMode(1, QtWidgets.QHeaderView.Fixed)

        self.calc_tabview.setRowHeight(0, 30)
        self.calc_tabview.setRowHeight(1, 30)
        self.calc_tabview.setRowHeight(2, 30)
        self.calc_tabview.update()


if __name__ == "__main__":
    import sys

    sys.excepthook = Utils.excepthook_errormsg
    app = QtWidgets.QApplication(sys.argv)
    ui = CalcResultsWidget()
    ui.show()
    sys.exit(app.exec_())
